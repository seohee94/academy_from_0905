컴포넌트와 인스턴스에서 데이터를 관리하지 않고 데이터를 빼놓는 라이브러리 - vuex
* 데이터가 중요한 이유 : 개발자는 vue를 사용함으로써 화면을 직접 조작하지 않고 데이터를 통해 조작한다 (구체적으로는 지시자를 통해 조작한다)


인스턴스 + 컴포넌트 -- 상태관리
지시자
라우팅

Jquery 단점 : 느리다, 직접 화면을 조작해야한다. 실제 dom을 조작한다(dom tree) 
Vue : 빠르다, 가상 dom(메모리상의 dom) -- 가상 dom에서 바뀐 부분만 실제 dom에 반영
ex, 제이쿼리는 tr을 2만개 만든다면 다 지우고 만든다. vue / react는 바뀐부분만 만든다

- 변수로 만든다
{{}}
v-

- 함수로 만든다
v-on

vue는 기본적으로
MVC 모델을 쓴다 그러나
MVVM : 입력태그 (select, input, textarea) 변수에 자동으로 들어감 -- 편한데 데이터 동기화가 어려워서 앵귤러가 이걸로 각광받았지만 지금은 버렸다
이 있다 -- 실제로 이걸 현업에서 쓰지는 않는다
-- 양방향을 지원하나 단방향만 쓴다?

지시자 방식(양방향 바인딩) : 앵귤러로 부터 옴
가상돔(컴포넌트) : 리액트로 부터옴
--> 앵귤러와 리액트의 장점만 합침

debugger F8을 누르면 디버거 모드 해제

데이터로 화면을 조작한다 : 태그를 만드는것, 태그를 지우는 것

인스턴스(최소단위) 데이터바인딩(화면조작) 컴포넌트(쪼개기) 라우팅(연결,이동)
컴포넌트가 메모리에 올라와서 사용되다가 메모리에서 사라지는 과정 -- 라이프 사이클


el(타겟), data(변수), methods(이벤트), components(조각)

어플리케이션에서 인스턴스는 하나밖에 만들수 없다

-- 컴포넌트
시맨틱 태그 기준으로 화면을 쪼갠다
인스턴스를 사용하는 이유 : 컴포넌트를 합쳐서 하나의 화면을 만들기 위해

페이지 = 뷰

components : 조합할때 사용한다. -- 인스턴스에서 사용할 컴포넌트를 등록한다

데이터를 직접 바꾸지 말고 this.$set(object, key, value)을 써라 !!!! -- 복제후 재할당을 하기 위해서 / 직접 바꾸면 화면이 렌더링 되지 않음
삭제할때는 splice

Vue.set() : 이거는 특정 케이스에서 안됨
this.$set() : 이거는 다됨 -- 이거를 쓰면 Vue.set()을 호출함.

computed - 자동실행, 동기식 -- 바로 계산이 되면 동기식으로 -- data와 공존 불가 (data 속성이 있으면 computed는 사용 할 수 없다)
watch - 자동실행, 비동기식 -- 기다린다 하면 비동기식으로 (100ms 라든가) -- 데이터에 종속(데이터를 보고 있다)
-- vuex 할때 쓰인다

v-model : input select textarea 에 쓰인다
input은 value 속성, checked 속성에만 쓸수 있다.

mounted : 인스턴스가 부착 될 때 한번만
updated : 리렌더링 될 때마다

templete = 화면을 만드는 뼈대

인라인 템플릿 : 직접 타겟이 되는 HTML을 만드는것?? -- 학습용
template -- 학습용
파일단위 만들기 -- 실제로 많이 쓰이는 방법 (SFC-single file components)

v-if : 제이쿼리에서 show, hide는 관리자도구를 열면 확인 할 수 있어서 보안상 취약점이 있다

{{}} : 특수문자는 무조건 문자열로
v-text : 비권고
v-html : html로 보인다 비권고, xss 공격에 취약

v-bind : 속성을 조작할때 사용
v-model : 지정된 조작할때 사용 input, textarea, select 의 value, checked, selected만 가능

v-on:click == @click
v-bind:uid = :uid

v-for을 쓸때는 v-bind:key 를 유니크하게 만들어야한다
v-model : change 이벤트가 내재돼있다

{{}} : 이 안에서 자바스크립트 코드를 쓸수있으나 쓰지 않는것이 좋다 / 변수선언이나 if 불가, 삼항연산자 하나만 가능?? -- 그러나 유지보수 불편함 computed를 사용하는것을 추천

v-text : innerText 이기때문에 html 태그가 사라진다
v-html : html 태그가 유지된다

자바스크립트는 return false; 로 이벤트를 취소 했는데, vue에서는 안됨

이벤트를 발생시킨 태그는 이벤트 객체에 들어가 있다. event.target에 

scroll 이벤트 -- 무한 스크롤에 많이 쓰임

